import * as lib from "./lib.js";
import test from "node:test";
import * as assert from "assert";
import { DateRange } from "./lib.js";
test("toEpochDate", () => {
    assert.strictEqual(lib.toEpochDate(new Date(Date.UTC(1970, 0, 2))), 1);
    assert.strictEqual(lib.toEpochDate(new Date(Date.UTC(1970, 0, 2, 1))), 1);
});
test("DateRange construct", () => {
    assert.throws(() => {
        new lib.DateRange(new Date(2025, 1, 2), new Date(2025, 1, 1));
    });
    assert.doesNotThrow(() => {
        new lib.DateRange(new Date(2025, 1, 2), new Date(2025, 1, 3));
    });
});
test("DateRange doesInclude Date", () => {
    const range = new DateRange(new Date(2024, 1, 2), new Date(2025, 2, 3));
    assert.strictEqual(range.doesInclude(new Date(2024, 1, 2)), true);
    assert.strictEqual(range.doesInclude(new Date(2024, 1, 1)), false);
    assert.strictEqual(range.doesInclude(new Date(2024, 12, 3)), true);
    assert.strictEqual(range.doesInclude(new Date(2025, 1, 3)), true);
    assert.strictEqual(range.doesInclude(new Date(2025, 2, 4)), false);
});
test("DateRange doesInclude DateRange", () => {
    const range = new DateRange(new Date(2024, 1, 2), new Date(2025, 2, 3));
    const tests = [
        {
            a: new Date(2024, 1, 2),
            b: new Date(2025, 2, 3),
            c: true,
        },
        {
            a: new Date(2024, 1, 10),
            b: new Date(2025, 1, 23),
            c: true
        },
        {
            a: new Date(2024, 0, 10),
            b: new Date(2025, 0, 1),
            c: false
        },
        {
            a: new Date(2024, 10, 10),
            b: new Date(2025, 3, 1),
            c: false
        },
        {
            a: new Date(2023, 0, 1),
            b: new Date(2024, 0, 1),
            c: false
        },
        {
            a: new Date(2025, 8, 8),
            b: new Date(2026, 1, 1),
            c: false
        }
    ];
    for (const tcase of tests) {
        assert.strictEqual(range.doesInclude(new DateRange(tcase.a, tcase.b)), tcase.c);
    }
});
test("isTabIndent", () => {
    const tabContent = `# TAB TEST
- list1
\t-list2
\t\tlist3
`;
    const spaceContent = `# SPACE TEST
- list1
  - list2
    -list 3
`;
    assert.strictEqual(lib.isTabIndent(tabContent.split("\n")), true);
    assert.strictEqual(lib.isTabIndent(spaceContent.split("\n")), false);
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGliLnRlc3QuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJsaWIudGVzdC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEtBQUssR0FBRyxNQUFNLFVBQVUsQ0FBQztBQUNoQyxPQUFPLElBQUksTUFBTSxXQUFXLENBQUM7QUFDN0IsT0FBTyxLQUFLLE1BQU0sTUFBTSxRQUFRLENBQUM7QUFDakMsT0FBTyxFQUFDLFNBQVMsRUFBQyxNQUFNLFVBQVUsQ0FBQztBQUVuQyxJQUFJLENBQUMsYUFBYSxFQUFFLEdBQUcsRUFBRTtJQUN4QixNQUFNLENBQUMsV0FBVyxDQUFDLEdBQUcsQ0FBQyxXQUFXLENBQUMsSUFBSSxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztJQUN2RSxNQUFNLENBQUMsV0FBVyxDQUFDLEdBQUcsQ0FBQyxXQUFXLENBQUMsSUFBSSxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7QUFDM0UsQ0FBQyxDQUFDLENBQUE7QUFFRixJQUFJLENBQUMscUJBQXFCLEVBQUUsR0FBRyxFQUFFO0lBQ2hDLE1BQU0sQ0FBQyxNQUFNLENBQUMsR0FBRyxFQUFFO1FBQ2xCLElBQUksR0FBRyxDQUFDLFNBQVMsQ0FBQyxJQUFJLElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLElBQUksSUFBSSxDQUFDLElBQUksRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMvRCxDQUFDLENBQUMsQ0FBQTtJQUNGLE1BQU0sQ0FBQyxZQUFZLENBQUMsR0FBRyxFQUFFO1FBQ3hCLElBQUksR0FBRyxDQUFDLFNBQVMsQ0FBQyxJQUFJLElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLElBQUksSUFBSSxDQUFDLElBQUksRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMvRCxDQUFDLENBQUMsQ0FBQTtBQUNILENBQUMsQ0FBQyxDQUFBO0FBRUYsSUFBSSxDQUFDLDRCQUE0QixFQUFFLEdBQUcsRUFBRTtJQUN2QyxNQUFNLEtBQUssR0FBRyxJQUFJLFNBQVMsQ0FBQyxJQUFJLElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLElBQUksSUFBSSxDQUFDLElBQUksRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUN4RSxNQUFNLENBQUMsV0FBVyxDQUFDLEtBQUssQ0FBQyxXQUFXLENBQUMsSUFBSSxJQUFJLENBQUMsSUFBSSxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxDQUFDO0lBQ2xFLE1BQU0sQ0FBQyxXQUFXLENBQUMsS0FBSyxDQUFDLFdBQVcsQ0FBQyxJQUFJLElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUUsS0FBSyxDQUFDLENBQUM7SUFDbkUsTUFBTSxDQUFDLFdBQVcsQ0FBQyxLQUFLLENBQUMsV0FBVyxDQUFDLElBQUksSUFBSSxDQUFDLElBQUksRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUMsQ0FBQztJQUNuRSxNQUFNLENBQUMsV0FBVyxDQUFDLEtBQUssQ0FBQyxXQUFXLENBQUMsSUFBSSxJQUFJLENBQUMsSUFBSSxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxDQUFDO0lBQ2xFLE1BQU0sQ0FBQyxXQUFXLENBQUMsS0FBSyxDQUFDLFdBQVcsQ0FBQyxJQUFJLElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUUsS0FBSyxDQUFDLENBQUM7QUFDcEUsQ0FBQyxDQUFDLENBQUE7QUFDRixJQUFJLENBQUMsaUNBQWlDLEVBQUUsR0FBRyxFQUFFO0lBQzVDLE1BQU0sS0FBSyxHQUFHLElBQUksU0FBUyxDQUFDLElBQUksSUFBSSxDQUFDLElBQUksRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsSUFBSSxJQUFJLENBQUMsSUFBSSxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ3hFLE1BQU0sS0FBSyxHQUFHO1FBQ2I7WUFDQyxDQUFDLEVBQUUsSUFBSSxJQUFJLENBQUMsSUFBSSxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUM7WUFDdkIsQ0FBQyxFQUFFLElBQUksSUFBSSxDQUFDLElBQUksRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1lBQ3ZCLENBQUMsRUFBRSxJQUFJO1NBQ1A7UUFDRDtZQUNDLENBQUMsRUFBRSxJQUFJLElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQztZQUN4QixDQUFDLEVBQUUsSUFBSSxJQUFJLENBQUMsSUFBSSxFQUFFLENBQUMsRUFBRSxFQUFFLENBQUM7WUFDeEIsQ0FBQyxFQUFFLElBQUk7U0FDUDtRQUNEO1lBQ0MsQ0FBQyxFQUFFLElBQUksSUFBSSxDQUFDLElBQUksRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDO1lBQ3hCLENBQUMsRUFBRSxJQUFJLElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQztZQUN2QixDQUFDLEVBQUUsS0FBSztTQUNSO1FBQ0Q7WUFDQyxDQUFDLEVBQUUsSUFBSSxJQUFJLENBQUMsSUFBSSxFQUFFLEVBQUUsRUFBRSxFQUFFLENBQUM7WUFDekIsQ0FBQyxFQUFFLElBQUksSUFBSSxDQUFDLElBQUksRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1lBQ3ZCLENBQUMsRUFBRSxLQUFLO1NBQ1I7UUFDRDtZQUNDLENBQUMsRUFBRSxJQUFJLElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQztZQUN2QixDQUFDLEVBQUUsSUFBSSxJQUFJLENBQUMsSUFBSSxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUM7WUFDdkIsQ0FBQyxFQUFFLEtBQUs7U0FDUjtRQUNEO1lBQ0MsQ0FBQyxFQUFFLElBQUksSUFBSSxDQUFDLElBQUksRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1lBQ3ZCLENBQUMsRUFBRSxJQUFJLElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQztZQUN2QixDQUFDLEVBQUUsS0FBSztTQUNSO0tBQ0QsQ0FBQTtJQUNELEtBQUssTUFBTSxLQUFLLElBQUksS0FBSyxFQUFFO1FBQzFCLE1BQU0sQ0FBQyxXQUFXLENBQUMsS0FBSyxDQUFDLFdBQVcsQ0FBQyxJQUFJLFNBQVMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztLQUNoRjtBQUNGLENBQUMsQ0FBQyxDQUFBO0FBRUYsSUFBSSxDQUFDLGFBQWEsRUFBRSxHQUFHLEVBQUU7SUFDeEIsTUFBTSxVQUFVLEdBQUc7Ozs7Q0FJbkIsQ0FBQztJQUNELE1BQU0sWUFBWSxHQUFHOzs7O0NBSXJCLENBQUM7SUFDRCxNQUFNLENBQUMsV0FBVyxDQUFDLEdBQUcsQ0FBQyxXQUFXLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxDQUFDO0lBQ2xFLE1BQU0sQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDLFdBQVcsQ0FBQyxZQUFZLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsS0FBSyxDQUFDLENBQUM7QUFDdEUsQ0FBQyxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBsaWIgZnJvbSBcIi4vbGliLmpzXCI7XG5pbXBvcnQgdGVzdCBmcm9tIFwibm9kZTp0ZXN0XCI7XG5pbXBvcnQgKiBhcyBhc3NlcnQgZnJvbSBcImFzc2VydFwiO1xuaW1wb3J0IHtEYXRlUmFuZ2V9IGZyb20gXCIuL2xpYi5qc1wiO1xuXG50ZXN0KFwidG9FcG9jaERhdGVcIiwgKCkgPT4ge1xuXHRhc3NlcnQuc3RyaWN0RXF1YWwobGliLnRvRXBvY2hEYXRlKG5ldyBEYXRlKERhdGUuVVRDKDE5NzAsIDAsIDIpKSksIDEpO1xuXHRhc3NlcnQuc3RyaWN0RXF1YWwobGliLnRvRXBvY2hEYXRlKG5ldyBEYXRlKERhdGUuVVRDKDE5NzAsIDAsIDIsIDEpKSksIDEpO1xufSlcblxudGVzdChcIkRhdGVSYW5nZSBjb25zdHJ1Y3RcIiwgKCkgPT4ge1xuXHRhc3NlcnQudGhyb3dzKCgpID0+IHtcblx0XHRuZXcgbGliLkRhdGVSYW5nZShuZXcgRGF0ZSgyMDI1LCAxLCAyKSwgbmV3IERhdGUoMjAyNSwgMSwgMSkpO1xuXHR9KVxuXHRhc3NlcnQuZG9lc05vdFRocm93KCgpID0+IHtcblx0XHRuZXcgbGliLkRhdGVSYW5nZShuZXcgRGF0ZSgyMDI1LCAxLCAyKSwgbmV3IERhdGUoMjAyNSwgMSwgMykpO1xuXHR9KVxufSlcblxudGVzdChcIkRhdGVSYW5nZSBkb2VzSW5jbHVkZSBEYXRlXCIsICgpID0+IHtcblx0Y29uc3QgcmFuZ2UgPSBuZXcgRGF0ZVJhbmdlKG5ldyBEYXRlKDIwMjQsIDEsIDIpLCBuZXcgRGF0ZSgyMDI1LCAyLCAzKSk7XG5cdGFzc2VydC5zdHJpY3RFcXVhbChyYW5nZS5kb2VzSW5jbHVkZShuZXcgRGF0ZSgyMDI0LCAxLCAyKSksIHRydWUpO1xuXHRhc3NlcnQuc3RyaWN0RXF1YWwocmFuZ2UuZG9lc0luY2x1ZGUobmV3IERhdGUoMjAyNCwgMSwgMSkpLCBmYWxzZSk7XG5cdGFzc2VydC5zdHJpY3RFcXVhbChyYW5nZS5kb2VzSW5jbHVkZShuZXcgRGF0ZSgyMDI0LCAxMiwgMykpLCB0cnVlKTtcblx0YXNzZXJ0LnN0cmljdEVxdWFsKHJhbmdlLmRvZXNJbmNsdWRlKG5ldyBEYXRlKDIwMjUsIDEsIDMpKSwgdHJ1ZSk7XG5cdGFzc2VydC5zdHJpY3RFcXVhbChyYW5nZS5kb2VzSW5jbHVkZShuZXcgRGF0ZSgyMDI1LCAyLCA0KSksIGZhbHNlKTtcbn0pXG50ZXN0KFwiRGF0ZVJhbmdlIGRvZXNJbmNsdWRlIERhdGVSYW5nZVwiLCAoKSA9PiB7XG5cdGNvbnN0IHJhbmdlID0gbmV3IERhdGVSYW5nZShuZXcgRGF0ZSgyMDI0LCAxLCAyKSwgbmV3IERhdGUoMjAyNSwgMiwgMykpO1xuXHRjb25zdCB0ZXN0cyA9IFtcblx0XHR7XG5cdFx0XHRhOiBuZXcgRGF0ZSgyMDI0LCAxLCAyKSxcblx0XHRcdGI6IG5ldyBEYXRlKDIwMjUsIDIsIDMpLFxuXHRcdFx0YzogdHJ1ZSxcblx0XHR9LFxuXHRcdHtcblx0XHRcdGE6IG5ldyBEYXRlKDIwMjQsIDEsIDEwKSxcblx0XHRcdGI6IG5ldyBEYXRlKDIwMjUsIDEsIDIzKSxcblx0XHRcdGM6IHRydWVcblx0XHR9LFxuXHRcdHtcblx0XHRcdGE6IG5ldyBEYXRlKDIwMjQsIDAsIDEwKSxcblx0XHRcdGI6IG5ldyBEYXRlKDIwMjUsIDAsIDEpLFxuXHRcdFx0YzogZmFsc2Vcblx0XHR9LFxuXHRcdHtcblx0XHRcdGE6IG5ldyBEYXRlKDIwMjQsIDEwLCAxMCksXG5cdFx0XHRiOiBuZXcgRGF0ZSgyMDI1LCAzLCAxKSxcblx0XHRcdGM6IGZhbHNlXG5cdFx0fSxcblx0XHR7XG5cdFx0XHRhOiBuZXcgRGF0ZSgyMDIzLCAwLCAxKSxcblx0XHRcdGI6IG5ldyBEYXRlKDIwMjQsIDAsIDEpLFxuXHRcdFx0YzogZmFsc2Vcblx0XHR9LFxuXHRcdHtcblx0XHRcdGE6IG5ldyBEYXRlKDIwMjUsIDgsIDgpLFxuXHRcdFx0YjogbmV3IERhdGUoMjAyNiwgMSwgMSksXG5cdFx0XHRjOiBmYWxzZVxuXHRcdH1cblx0XVxuXHRmb3IgKGNvbnN0IHRjYXNlIG9mIHRlc3RzKSB7XG5cdFx0YXNzZXJ0LnN0cmljdEVxdWFsKHJhbmdlLmRvZXNJbmNsdWRlKG5ldyBEYXRlUmFuZ2UodGNhc2UuYSwgdGNhc2UuYikpLCB0Y2FzZS5jKTtcblx0fVxufSlcblxudGVzdChcImlzVGFiSW5kZW50XCIsICgpID0+IHtcblx0Y29uc3QgdGFiQ29udGVudCA9IGAjIFRBQiBURVNUXG4tIGxpc3QxXG5cXHQtbGlzdDJcblxcdFxcdGxpc3QzXG5gO1xuXHRjb25zdCBzcGFjZUNvbnRlbnQgPSBgIyBTUEFDRSBURVNUXG4tIGxpc3QxXG4gIC0gbGlzdDJcbiAgICAtbGlzdCAzXG5gO1xuXHRhc3NlcnQuc3RyaWN0RXF1YWwobGliLmlzVGFiSW5kZW50KHRhYkNvbnRlbnQuc3BsaXQoXCJcXG5cIikpLCB0cnVlKTtcblx0YXNzZXJ0LnN0cmljdEVxdWFsKGxpYi5pc1RhYkluZGVudChzcGFjZUNvbnRlbnQuc3BsaXQoXCJcXG5cIikpLCBmYWxzZSk7XG59KTtcbiJdfQ==